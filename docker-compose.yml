services:
  # Kafka Broker: Central component of Apache Kafka, handles message brokering
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka # Hostname for the Kafka broker container
    container_name: kafka # Container name for the Kafka broker
    restart: always # Ensures Kafka broker restarts if it fails
    ports:
      - "9092:9092" # Exposes Kafka's default port
    networks:
      - veramo_network # Connects to the veramo_network
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0 # Time before consumer group rebalancing begins
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    healthcheck:
      test: ["CMD-SHELL", "nc -z kafka 29092"] # Health check for Kafka broker availability
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - kafka_data:/var/lib/kafka/data

  # Dedicated Prometheus exporter for Kafka consumer group lag and broker/topic metrics.
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    hostname: kafka-exporter
    ports:
      - "9308:9308" # Prometheus scrape endpoint
    networks:
      - veramo_network
    command:
      - "--kafka.server=kafka:29092"
      - "--kafka.version=7.4.0"
      - "--web.listen-address=:9308"
      - "--web.telemetry-path=/metrics"
    depends_on:
      kafka:
        condition: service_healthy

  # Schema Registry: Provides a RESTful interface for managing Avro schemas
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0 # Use specific version instead of latest
    hostname: schema-registry # Hostname for Schema Registry
    container_name: schema-registry # Container name for Schema Registry
    restart: always # Ensures Schema Registry restarts if it fails
    depends_on:
      kafka:
        condition: service_healthy # Wait for Kafka to be healthy
    ports:
      - "8081:8081" # Exposes the Schema Registry API port
    networks:
      - veramo_network # Connects to the veramo_network
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka:29092" # Connects Schema Registry to Kafka broker
      SCHEMA_REGISTRY_HOST_NAME: "localhost" # Hostname for Schema Registry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081" # HTTP listener address for Schema Registry
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"] # Health check for Schema Registry
      interval: 10s
      timeout: 5s
      retries: 5

  # Control Center: A UI and monitoring tool for managing and monitoring Kafka
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0 # Use specific version instead of latest
    hostname: control-center # Hostname for Control Center
    container_name: control-center # Container name for Control Center
    restart: always # Ensures Control Center restarts if it fails
    depends_on:
      kafka:
        condition: service_healthy # Wait for Kafka to be healthy
      schema-registry:
        condition: service_healthy # Wait for Schema Registry to be healthy
    ports:
      - "9021:9021" # Exposes the Control Center port
    networks:
      - veramo_network # Connects to the veramo_network
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka:29092" # Connects Control Center to Kafka broker
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081" # URL for Schema Registry
      CONTROL_CENTER_REPLICATION_FACTOR: 1 # Replication factor for internal topics
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1 # Number of partitions for internal topics
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1 # Number of partitions for monitoring topics
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1 # Replication factor for metrics topics
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092 # Add this for metrics
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1 # Add this for metrics
      CONFLUENT_METRICS_ENABLE: "true" # Enable metrics collection
      PORT: 9021 # Port for Control Center

  # Kafka REST Proxy: Exposes a RESTful interface to interact with Kafka
  kafka-rest:
    image: confluentinc/cp-kafka-rest:7.4.0 # Use specific version instead of latest
    hostname: kafka-rest # Hostname for Kafka REST Proxy
    container_name: kafka-rest
    restart: always # Ensures Kafka REST Proxy restarts if it fails
    ports:
      - "8082:8082" # Exposes the REST API port
    networks:
      - veramo_network # Connects to the veramo_network
    depends_on:
      schema-registry:
        condition: service_healthy # Wait for Schema Registry to be healthy
      kafka:
        condition: service_healthy # Wait for Kafka to be healthy
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: "kafka:29092" # Connects REST Proxy to Kafka broker
      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema-registry:8081" # URL for Schema Registry
      KAFKA_REST_HOST_NAME: localhost # Hostname for REST Proxy
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082" # REST Proxy listener address

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    hostname: node-exporter
    ports:
      - "9100:9100"
    restart: always
    networks:
      - veramo_network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    hostname: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: always
    networks:
      - veramo_network

  prometheus-config:
    image: alpine:latest
    hostname: prometheus-config
    container_name: prometheus-config
    volumes:
      - ./prometheus/prometheus.yml.template:/tmp/prometheus.yml.template
      - prometheus-config:/prometheus-config
    environment:
      DID_PROVIDER: ${DID_PROVIDER:-did:key}
      SSI_VALIDATION: ${SSI_VALIDATION:-true}
      CACHE_DID: ${CACHE_DID:-false}
      PROCESSING_MODE: ${PROCESSING_MODE:-sync}
    command: |
      sh -euo pipefail -c '
        apk add --no-cache gettext
        envsubst < /tmp/prometheus.yml.template > /prometheus-config/prometheus.yml
        # fail if any placeholders remain
        if grep -q '$\\{' /prometheus-config/prometheus.yml; then
          echo "Unsubstituted variables remain";
          exit 1
        fi
        echo "All items substituted"
      '
    restart: "no"


  prometheus:
    image: prom/prometheus
    container_name: prometheus
    hostname: prometheus
    depends_on:
      prometheus-config:
        condition: service_completed_successfully
    volumes:
      - prometheus-config:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      # - '--config.file=/etc/prometheus/prometheus.yml'
      # - '--storage.tsdb.path=/prometheus'
    #   - '--web.console.libraries=/etc/prometheus/console_libraries'
    #   - '--web.console.templates=/etc/prometheus/consoles'
      # - '--web.enable-lifecycle'
      # - '--web.listen-address=0.0.0.0:9090'
    #   - '--storage.tsdb.retention.time=15d'

    ports:
      - "9090:9090"
    restart: always
    networks:
      - veramo_network
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:9090/-/healthy || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  db:
    image: postgres:16
    container_name: postgres
    hostname: postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-veramo}
      POSTGRES_USER: ${POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - veramo_network
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-root} -d ${POSTGRES_DB:-veramo}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # pgadmin:
  #   image: dpage/pgadmin4
  #   container_name: pgadmin
  #   hostname: pgadmin
  #   restart: always
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@example.com
  #     PGADMIN_DEFAULT_PASSWORD: adminpassword
  #     PGADMIN_LISTEN_PORT: 80
  #   ports:
  #     - "8088:80"
  #   networks:
  #     - veramo_network
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   volumes:
  #     - pgadmin_data:/var/lib/pgadmin

  veramo_server:
    build:
      context: ./veramo-agent
      dockerfile: Dockerfile
    container_name: veramo_server
    hostname: veramo_server
    ports:
      - "3332:3332"
    environment:
      DEBUG: veramo*
      PORT: 3332
      DID_PROVIDER: ${DID_PROVIDER:-did:key}
      SSI_VALIDATION: ${SSI_VALIDATION:-true}
      CACHE_DID: ${CACHE_DID:-false}
      PROCESSING_MODE: ${PROCESSING_MODE:-sync}
    networks:
      - veramo_network
    command: ["yarn", "start"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3332/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      restart_policy:
        condition: on-failure # Restarts only on failure
        delay: 5s
        max_attempts: 3
        window: 60s
    volumes:
      - ./veramo-agent:/app
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
      host_did_web:
        condition: service_healthy

  credential_verifier:
    build:
      context: ./veramo-verifier
      dockerfile: Dockerfile
    container_name: credential_verifier
    hostname: credential_verifier
    ports:
      - "4321:4321"
    environment:
      DEBUG: veramo-verifier*
      PORT: 4321
      DID_PROVIDER: ${DID_PROVIDER:-did:key}
      SSI_VALIDATION: ${SSI_VALIDATION:-true}
      CACHE_DID: ${CACHE_DID:-false}
      PROCESSING_MODE: ${PROCESSING_MODE:-sync}
    networks:
      - veramo_network
    command: ["yarn", "start"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4321/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      restart_policy:
        condition: on-failure # Restarts only on failure
        delay: 5s
        max_attempts: 3
        window: 60s
    volumes:
      - ./veramo-verifier:/app
      - /app/node_modules

  host_did_web:
    build:
      context: ./host_did_web
      dockerfile: Dockerfile
    container_name: host_did_web
    hostname: host_did_web
    ports:
      - "3999:3999"
    networks:
      - veramo_network
    volumes:
      - type: bind
        source: ./host_did_web/src
        target: /app/src
        bind:
          create_host_path: true
      - type: bind
        source: ${HOME}/.ssh/docker_github
        target: /root/.ssh/id_rsa
        read_only: true
      - type: bind
        source: ${HOME}/.ssh/docker_github.pub
        target: /root/.ssh/id_rsa.pub
        read_only: true
    environment:
      DID_PROVIDER: ${DID_PROVIDER:-did:key}
      SSI_VALIDATION: ${SSI_VALIDATION:-true}
      CACHE_DID: ${CACHE_DID:-false}
      PROCESSING_MODE: ${PROCESSING_MODE:-sync}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3999/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  data_synthesizer:
    build:
      context: ./data_synthesizer
      dockerfile: Dockerfile
    container_name: data_synthesizer
    hostname: data_synthesizer
    ports:
      - "4200:4200"
      - "2122:2122"
    networks:
      - veramo_network
    depends_on:
      veramo_server:
        condition: service_healthy
      # prometheus:
      #   condition: service_healthy
    volumes:
      - ./data_synthesizer:/app
    environment:
      PORT: 4200
      DID_PROVIDER: ${DID_PROVIDER:-did:key}
      SSI_VALIDATION: ${SSI_VALIDATION:-true}
      CACHE_DID: ${CACHE_DID:-false}
      PROCESSING_MODE: ${PROCESSING_MODE:-sync}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4200/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # synthesizer_base: &synthesizer_base
  #   build:
  #     context: ./iot-synthesizer
  #     dockerfile: Dockerfile
  #   container_name: synthesizer_base
  #   hostname: synthesizer_base
  #   ports:
  #     - "3339:3339"
  #     - "2112:2112"
  #   networks:
  #     - veramo_network
  #   depends_on:
  #     veramo_server:
  #       condition: service_healthy
  #     # prometheus:
  #     #   condition: service_healthy
  #   volumes:
  #     - ./iot-synthesizer:/app
  #   environment: &base_env
  #     PORT: 3339
  #     PATIENT_ID: P-2000
  #     VERAMO_API_TOKEN: ${VERAMO_API_TOKEN:-test123}
  #     VERAMO_API_URL: ${VERAMO_API_URL:-http://veramo_server:3332}
  #     DID_PROVIDER: did:key
  #     DID_WEB_LINK: did:web:MalmikeFunProjects.github.io:GenerateDidWeb:device-1
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:3339/health || exit 1"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s

  # synthesizer1:
  #   <<: *synthesizer_base
  #   container_name: synthesizer1
  #   hostname: synthesizer1
  #   ports:
  #     - "3340:3339"
  #     - "2113:2112"
  #   environment:
  #     <<: *base_env
  #     PORT: 3340
  #     PATIENT_ID: P-2001
  #     DID_PROVIDER: did:key
  #     DID_WEB_LINK: did:web:MalmikeFunProjects.github.io:GenerateDidWeb:device-2

  # synthesizer2:
  #   <<: *synthesizer_base
  #   container_name: synthesizer2
  #   hostname: synthesizer2
  #   ports:
  #     - "3341:3339"
  #   environment:
  #     <<: *base_env
  #     PORT: 3341
  #     PATIENT_ID: P-2002
  #     DID_PROVIDER: did:key
  #     DID_WEB_LINK: did:web:MalmikeFunProjects.github.io:GenerateDidWeb:device-3

  # producer_go:
  #   container_name: producer_go
  #   hostname: producer_go
  #   build:
  #     context: ./producer_go
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3335:3335"
  #   networks:
  #     - veramo_network
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   #   synthesizer_base:
  #   #     condition: service_healthy
  #     # synthesizer1:
  #     #   condition: service_healthy
  #   environment:
  #     AVRO_SCHEMA: resources/avro/health_sensor.avsc
  #     SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #     BROKER_URLs: kafka:9092
  # volumes:
  #   - ./producer_go:/app

  kafka_producer:
    container_name: kafka_producer
    hostname: kafka_producer
    build:
      context: ./kafka_producer
      dockerfile: Dockerfile
    ports:
      - "3337:3337"
      - "9000:9000"
    networks:
      - veramo_network
    environment:
      DID_PROVIDER: ${DID_PROVIDER:-did:key}
      SSI_VALIDATION: ${SSI_VALIDATION:-true}
      CACHE_DID: ${CACHE_DID:-false}
      PROCESSING_MODE: ${PROCESSING_MODE:-sync}
      PRODUCER_TIMEOUT: ${PRODUCER_TIMEOUT}
    depends_on:
      kafka_initialiser:
        condition: service_healthy
      data_synthesizer:
        condition: service_healthy
      kafka_consumer:
        condition: service_healthy
      # synthesizer_base:
      #   condition: service_healthy
    volumes:
      - ./kafka_producer/app:/app/app

  kafka_consumer:
    container_name: kafka_consumer
    hostname: kafka_consumer
    build:
      context: ./kafka_consumer
      dockerfile: Dockerfile
    ports:
      - "3338:3338"
      - "9001:9001"
    networks:
      - veramo_network
    environment:
      DID_PROVIDER: ${DID_PROVIDER:-did:key}
      SSI_VALIDATION: ${SSI_VALIDATION:-true}
      CACHE_DID: ${CACHE_DID:-false}
      PROCESSING_MODE: ${PROCESSING_MODE:-sync}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3338/health || exit 1"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 60s
    depends_on:
      kafka_initialiser:
        condition: service_healthy
      credential_verifier:
        condition: service_healthy
    volumes:
      - ./kafka_consumer/app:/app/app

  kafka_initialiser:
    build:
      context: ./kafka_initialiser
      dockerfile: Dockerfile
    container_name: kafka_initialiser
    hostname: kafka_initialiser
    ports:
      - "5003:5003"
    networks:
      - veramo_network
    healthcheck:
      test: ["CMD-SHELL", "grep -q SUCCESS /tmp/healthcheck.log || exit 1"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 60s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    volumes:
      - ./kafka_initialiser/:/app
    environment:
      KSQL_BOOTSTRAP_SERVERS: "kafka:29092"
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy # Waits for Schema Registry to be healthy

volumes:
  db_data:
  pgadmin_data:
  kafka_data:
    driver: local
  prometheus-config:
  prometheus-data:
  grafana-data:

networks:
  veramo_network:
    driver: bridge
